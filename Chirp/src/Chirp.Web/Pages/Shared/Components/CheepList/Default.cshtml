@using Chirp.Core
@using Chirp.Core.DTO
@using System.Text.Json
@inject IAuthorService service
@inject ICheepService CheepService

@{
    var targetPage = ViewBag.TargetPage as string ?? "";
    IEnumerable<CheepDTO> cheeps = ViewBag.Cheeps;
    Dictionary<string, byte[]> imageMap = ViewBag.ImageMap;
    IEnumerable<AuthorDTO> Follows = [];
    if (User.Identity!.IsAuthenticated)
    {
        Follows = service.GetFollows(User.Identity!.Name!);
    }
}

@await Component.InvokeAsync("SideVideo", new {isLeft = true})
@await Component.InvokeAsync("SideVideo", new {isLeft = false})

<ul id="messagelist" class="cheeps">
    @foreach (var cheep in cheeps)
    {
        var likeCount = cheep.Id.HasValue 
            ? CheepService.GetLikeCount(cheep.Id.Value).Result 
            : 0;

        var hasLiked = cheep.Id.HasValue && User.Identity!.IsAuthenticated 
            ? CheepService.HasUserLikedCheep(cheep.Id.Value, User.Identity.Name!).Result 
            : false;
        
        <li id="cheep-@cheep.Id" style="word-wrap: break-word;">
            <p>
                <strong>
                    <img src="@(imageMap.ContainsKey(cheep.Author) ? $"data:image/png;base64,{Convert.ToBase64String(imageMap[cheep.Author])}" : "/images/chirp-default-profile-blurred.png")" alt="Profile Image" width="50" height="50" />
                    <a href="/@cheep.Author">@cheep.Author</a>
                    @if (User.Identity!.IsAuthenticated && User.Identity!.Name != cheep.Author)
                    {
                        @if (Follows.Any(a => a.Name == cheep.Author))
                        {
                            <button onclick="toggleFollow(this, '@cheep.Author', false)">unfollow</button>
                        }
                        else
                        {
                            <button onclick="toggleFollow(this, '@cheep.Author', true)">follow</button>
                        }
                    }
                </strong>
            </p>
            <p>@cheep.Message</p>
            <div style="display: flex; align-items: center;">
                <small>&mdash; @DateTimeOffset.FromUnixTimeSeconds(cheep.UnixTimestamp).DateTime.ToString("dd/MM/yy H:mm:ss")</small>
                <a href="#" onclick="goToSpecificCheep(@cheep.Id)">
                    <img src="images/comment.png" alt="Comment Icon"
                         style="width: 18px; height: 18px; margin-left: 15px; vertical-align: middle"/>
                </a>
                <small style="margin-left: -5px">@CheepService.GetCommentAmountOnCheep(cheep.Id)</small>

            @if (User.Identity.IsAuthenticated)
                {
                    <button
                        id="likeButton-@cheep.Id"
                        style="margin-left: 4px"
                        type="button"
                        onclick="toggleLike(this, @cheep.Id, @(JsonSerializer.Serialize(!hasLiked)))"
                        class="like-button@(hasLiked ? "-liked" : "")">
                    </button>
                    <small id="likecount-@cheep.Id" style="margin-left: -2px">@likeCount</small>
                }
            </div>
        </li>
    }
</ul>

<script type="text/javascript">
    function showPopup() {
        document.getElementById('popup').style.display = 'flex';
    }

    function cancelPopup() {
        document.getElementById('popup').style.display = 'none';
    }

    function goToSpecificCheep(cheepId) {
        window.location.href = `/SpecificCheep?cheepId=${cheepId}`;
    }

</script>