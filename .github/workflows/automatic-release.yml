#This aumtomaticly release when a pul request to main is accepted
name: Release on PR Merge
permissions: write-all

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 #Fetch all history and tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x'

      - name: Restore dependencies
        run: dotnet restore Chirp/
      
      - name: Build
        run: dotnet build --no-restore Chirp/
      
      - name: Test
        run: dotnet test --no-build --verbosity normal Chirp/

       # Get the latest tag from the repository
      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")  # Get latest tag or default to v0.0.0
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Current latest tag is $LATEST_TAG"

      - name: Get PR labels
        id: get_labels
        run: |
          PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          echo "Labels fetched: $PR_LABELS"

      # Determine the next version based on PR labels
      - name: Calculate next version
        id: calculate_version
        run: |
          # Initizalise skip release
          echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          
          # Extract major, minor, patch from the latest tag (strip leading 'v')
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Check which label is present and increment the version accordingly
          for label in $(echo "$PR_LABELS" | tr ',' ' '); do
             if [[ "$label" == "breaking" ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              break
            elif [[ "$label" == "feature" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif [[ "$label" == "bug" ]]; then
              PATCH=$((PATCH + 1))
            else
              echo "Non accounted label detected. Skipping release process."
              echo "SKIP_RELEASE=true" >> $GITHUB_ENV
              exit 0
            fi
          done

          # Construct the new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Calculated new version: $NEW_VERSION"

      # Create a new Git tag with the calculated version
      - name: Create Git Tag
        if: env.SKIP_RELEASE != 'true'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
      
      - name: Build for all platforms
        if: env.SKIP_RELEASE != 'true'
        working-directory: Chirp
        run: |
          dotnet publish -c Release -r linux-x64 --self-contained false -o publish/linux-x64 --output-format single-file
          dotnet publish -c Release -r win-x64 --self-contained false -o publish/win-x64 --output-format single-file
          dotnet publish -c Release -r osx-x64 --self-contained false -o publish/osx-x64 --output-format single-file

          
      # Create ZIP files
      - name: Zip the output
        if: env.SKIP_RELEASE != 'true'
        working-directory: Chirp
        run: |
          cd publish/linux-x64
          zip -r chirp-${{ NEW_VERSION}}-linux-x64.zip Chirp
          cd ../win-x64
          zip -r chirp-${{ NEW_VERSION}}-win-x64.zip Chirp
          cd ../osx-x64
          zip -r chirp-${{ NEW_VERSION}}-osx-x64.zip Chirp


      # Upload the release artifacts and create the release
      - name: Create GitHub release
        if: env.SKIP_RELEASE != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}  # Use the new version tag
          name: Release ${{ env.NEW_VERSION }}  # Set release name
          files: |
            Chirp/chirp-linux-x64.zip
            Chirp/chirp-win-x64.zip
            Chirp/chirp-osx-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
