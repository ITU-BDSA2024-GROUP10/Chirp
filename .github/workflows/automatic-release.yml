#This aumtomaticly release when a pul request to main is accepted
name: Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test

       # Get the latest tag from the repository
      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")  # Get latest tag or default to v0.0.0
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Current latest tag is $LATEST_TAG"

      # Determine the next version based on PR labels
      - name: Calculate next version
        id: calculate_version
        run: |
          # Extract major, minor, patch from the latest tag (strip leading 'v')
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Get PR labels
          PR_LABELS=$(echo "${{ github.event.pull_request.labels[*].name }}")

          # Check which label is present and increment the version accordingly
          if [[ "$PR_LABELS" == *"breaking"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$PR_LABELS" == *"feature"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$PR_LABELS" == *"bug"* ]]; then
            PATCH=$((PATCH + 1))
          fi

          # Construct the new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Calculated new version: $NEW_VERSION"

      # Create a new Git tag with the calculated version
      - name: Create Git Tag
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      # Build for all platforms
      - name: Build for all platforms
        run: |
          dotnet publish -c Release -r linux-x64 --self-contained false -p:PublishSingleFile=true -o ./publish/linux-x64
          dotnet publish -c Release -r win-x64 --self-contained false -p:PublishSingleFile=true -o ./publish/win-x64
          dotnet publish -c Release -r osx-x64 --self-contained false -p:PublishSingleFile=true -o ./publish/osx-x64

      # Create ZIP files
      - name: Zip the output
        run: |
          zip -r chirp-linux-x64.zip ./publish/linux-x64
          zip -r chirp-win-x64.zip ./publish/win-x64
          zip -r chirp-osx-x64.zip ./publish/osx-x64

      # Upload the release artifacts and create the release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}  # Use the new version tag
          name: Release ${{ env.NEW_VERSION }}  # Set release name
          files: |
            chirp-linux-x64.zip
            chirp-win-x64.zip
            chirp-osx-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
