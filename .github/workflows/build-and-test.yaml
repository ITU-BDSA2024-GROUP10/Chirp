# Got inspiration to the following https://github.com/actions/starter-workflows/blob/main/ci/dotnet.yml
# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: build-and-test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      job_status: ${{ steps.build_status.outcome }} # Save the build status as an output
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    #- name: Enter solution
    #  run: cd Chirp/
    - name: Restore dependencies
      run: dotnet restore Chirp/
    - name: Build
      run: dotnet build --no-restore Chirp/
    - name: Test
      run: dotnet test --no-build --verbosity normal Chirp/
    - name: Set Job Status
      id: build_status # Give this step an ID to reference its outcome
      run: echo "job_status=$?" # Capture the exit code of the previous command (0 = success, non-zero = failure)
      continue-on-error: true
  
  # The code below was created in colaberation with chat-gpt
  # Use GitHub Script to set a custom status check
  set-status:
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job
    steps:
    - name: Set status check
      uses: actions/github-script@v6
      with:
        script: |
          const { context } = require('@actions/github');
          const state = ${{ needs.build.result }} === 'success' ? 'success' : 'failure'; // Set state based on the outcome of 'build' job
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state, # Set state based on build job result
            context: 'build and test',
            description: `Build and test ${state === 'success' ? 'completed successfully' : 'failed'}`,
          });

